# Lambda deployment configuration using pyproject.toml
# This example shows how to use pyproject.toml for modern Python dependency management

project:
  name: "lambda-test-python"
  description: "Simple Python Lambda function for testing the deploy action"
  runtime: "python"
  versions:
    python: "3.9"

build:
  commands:
    # Install runtime and development dependencies from pyproject.toml
    install: "pip install -e .[dev]"
    
    # Quality gates using tools defined in pyproject.toml
    lint: "flake8 . --max-line-length=88 && black --check . && isort --check-only ."
    test: "python -m pytest tests/ -v --cov=lambda_function"
    
    build: "auto"
  
  # Artifact configuration
  artifact:
    path: "lambda-deployment.zip"
    exclude_patterns:
      - "*.md"
      - "test_*.py"
      - "tests/"
      - "__pycache__/"
      - "*.pyc"
      - ".pytest_cache/"
      - ".coverage"
      - "htmlcov/"
      - "pyproject.toml"  # Exclude from deployment package

environments:
  dev:
    trigger_branches: ["main", "feature/**"]
    aws:
      region: "eu-west-1"
      auth_type: "access_key"
    deployment:
      versioning: false
      run_tests: true
      notifications: false

# Deployment configuration
deployment:
  health_check:
    enabled: true
    test_payload_object:
      name: "Test"
      source: "GitHub Actions"
      timestamp: "2025-08-22"
      environment: "dev"
    expected_status_code: 200
    expected_response_contains: "Hello, Test!"

  auto_rollback:
    enabled: false

# Benefits of using pyproject.toml:
# 1. Modern Python standard (PEP 518, 621)
# 2. Single file for project metadata and dependencies
# 3. Tool configuration in same file
# 4. Better dependency resolution
# 5. Development dependencies separated from runtime
# 6. Version management integrated

# Alternative install commands:
# install: "pip install -e .[lint,test]"     # Install specific dependency groups
# install: "pip install -e . && pip install -e .[dev]"  # Runtime + dev dependencies
