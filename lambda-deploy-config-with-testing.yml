# Lambda deployment configuration WITH linting and testing
# This example shows how to properly set up lint and test commands

project:
  name: "lambda-test-python"
  description: "Simple Python Lambda function for testing the deploy action"
  runtime: "python"
  versions:
    python: "3.9"

build:
  commands:
    # Install both runtime and dev dependencies
    install: "pip install -r requirements.txt && pip install flake8 pytest"
    
    # Lint command (requires flake8)
    lint: "flake8 . --max-line-length=88 --ignore=E203,W503"
    
    # Test command (requires pytest)
    test: "python -m pytest tests/ -v"
    
    build: "auto"
  
  # Artifact configuration
  artifact:
    path: "lambda-deployment.zip"
    exclude_patterns:
      - "*.md"
      - "test_*.py"
      - "__pycache__/"
      - "*.pyc"
      - ".pytest_cache/"
      - "tests/"

environments:
  dev:
    trigger_branches: ["main", "feature/**"]
    aws:
      region: "eu-west-1"
      auth_type: "access_key"
    deployment:
      versioning: false
      run_tests: true
      notifications: false

# Deployment configuration
deployment:
  health_check:
    enabled: true
    test_payload_object:
      name: "Test"
      source: "GitHub Actions"
      timestamp: "2025-08-22"
      environment: "dev"
    expected_status_code: 200
    expected_response_contains: "Hello, Test!"

  auto_rollback:
    enabled: false

# NOTE: To use this configuration:
# 1. Create a tests/ directory with test files
# 2. Or use a dev-requirements.txt file:
#    install: "pip install -r requirements.txt -r dev-requirements.txt"
# 3. Or use pyproject.toml with dev dependencies
